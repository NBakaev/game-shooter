// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: UsersGet.proto

#include "UsersGet.pb.h"
#include "UsersGet.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>

static const char* Users_method_names[] = {
  "/Users/GetUserById",
  "/Users/AuthenticateUser",
};

std::unique_ptr< Users::Stub> Users::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Users::Stub> stub(new Users::Stub(channel));
  return stub;
}

Users::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetUserById_(Users_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AuthenticateUser_(Users_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Users::Stub::GetUserById(::grpc::ClientContext* context, const ::UserGetRequest& request, ::UserGetResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_GetUserById_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::UserGetResponse>* Users::Stub::AsyncGetUserByIdRaw(::grpc::ClientContext* context, const ::UserGetRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::UserGetResponse>(channel_.get(), cq, rpcmethod_GetUserById_, context, request);
}

::grpc::Status Users::Stub::AuthenticateUser(::grpc::ClientContext* context, const ::UserAuthenticateRequest& request, ::UserAuthenticateResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_AuthenticateUser_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::UserAuthenticateResponse>* Users::Stub::AsyncAuthenticateUserRaw(::grpc::ClientContext* context, const ::UserAuthenticateRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::UserAuthenticateResponse>(channel_.get(), cq, rpcmethod_AuthenticateUser_, context, request);
}

Users::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Users_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Users::Service, ::UserGetRequest, ::UserGetResponse>(
          std::mem_fn(&Users::Service::GetUserById), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Users_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Users::Service, ::UserAuthenticateRequest, ::UserAuthenticateResponse>(
          std::mem_fn(&Users::Service::AuthenticateUser), this)));
}

Users::Service::~Service() {
}

::grpc::Status Users::Service::GetUserById(::grpc::ServerContext* context, const ::UserGetRequest* request, ::UserGetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Users::Service::AuthenticateUser(::grpc::ServerContext* context, const ::UserAuthenticateRequest* request, ::UserAuthenticateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


